Started by user Paul Aglipay
Obtained Jenkinsfile from git https://github.com/paglipay/paglipay-ansible-terraform-jenkins-java.git
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /var/lib/jenkins/workspace/paglipay-ansible-terraform-jenkins-java2
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
No credentials specified
 > git rev-parse --resolve-git-dir /var/lib/jenkins/workspace/paglipay-ansible-terraform-jenkins-java2/.git # timeout=10
Fetching changes from the remote Git repository
 > git config remote.origin.url https://github.com/paglipay/paglipay-ansible-terraform-jenkins-java.git # timeout=10
Fetching upstream changes from https://github.com/paglipay/paglipay-ansible-terraform-jenkins-java.git
 > git --version # timeout=10
 > git --version # 'git version 2.39.2'
 > git fetch --tags --force --progress -- https://github.com/paglipay/paglipay-ansible-terraform-jenkins-java.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git rev-parse refs/remotes/origin/master^{commit} # timeout=10
Checking out Revision 55ed50eee65b421b7c46f8394d465dc4d0fe2121 (refs/remotes/origin/master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 55ed50eee65b421b7c46f8394d465dc4d0fe2121 # timeout=10
Commit message: "aws_rsa.pem"
 > git rev-list --no-walk 55ed50eee65b421b7c46f8394d465dc4d0fe2121 # timeout=10
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Checkout)
[Pipeline] script
[Pipeline] {
[Pipeline] dir
Running in /var/lib/jenkins/workspace/paglipay-ansible-terraform-jenkins-java2/terraform
[Pipeline] {
[Pipeline] git
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
No credentials specified
 > git rev-parse --resolve-git-dir /var/lib/jenkins/workspace/paglipay-ansible-terraform-jenkins-java2/terraform/.git # timeout=10
Fetching changes from the remote Git repository
 > git config remote.origin.url https://github.com/paglipay/paglipay-ansible-terraform-jenkins-java.git # timeout=10
Fetching upstream changes from https://github.com/paglipay/paglipay-ansible-terraform-jenkins-java.git
 > git --version # timeout=10
 > git --version # 'git version 2.39.2'
 > git fetch --tags --force --progress -- https://github.com/paglipay/paglipay-ansible-terraform-jenkins-java.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git rev-parse refs/remotes/origin/master^{commit} # timeout=10
Checking out Revision 55ed50eee65b421b7c46f8394d465dc4d0fe2121 (refs/remotes/origin/master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 55ed50eee65b421b7c46f8394d465dc4d0fe2121 # timeout=10
 > git branch -a -v --no-abbrev # timeout=10
 > git branch -D master # timeout=10
 > git checkout -b master 55ed50eee65b421b7c46f8394d465dc4d0fe2121 # timeout=10
Commit message: "aws_rsa.pem"
[Pipeline] }
[Pipeline] // dir
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Plan)
[Pipeline] sh
+ cd terraform/
+ terraform init

[0m[1mInitializing the backend...[0m

[0m[1mInitializing provider plugins...[0m
- Reusing previous version of hashicorp/aws from the dependency lock file
- Installing hashicorp/aws v5.32.1...
- Installed hashicorp/aws v5.32.1 (signed by HashiCorp)

Terraform has made some changes to the provider dependency selections recorded
in the .terraform.lock.hcl file. Review those changes and commit them to your
version control system if they represent changes you intended to make.

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
[Pipeline] sh
+ cd terraform/
+ terraform plan -out tfplan
[0m[1mdata.aws_ssm_parameter.amzn2_linux: Reading...[0m[0m
[0m[1mdata.aws_availability_zones.available: Reading...[0m[0m
[0m[1mdata.aws_ssm_parameter.amzn2_linux: Read complete after 1s [id=/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2][0m
[0m[1mdata.aws_availability_zones.available: Read complete after 1s [id=us-east-1][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_instance.nginx1[0m will be created
[0m  [32m+[0m[0m resource "aws_instance" "nginx1" {
      [32m+[0m[0m ami                                  = "ami-04c0f9ef2f505b609"
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m associate_public_ip_address          = (known after apply)
      [32m+[0m[0m availability_zone                    = (known after apply)
      [32m+[0m[0m cpu_core_count                       = (known after apply)
      [32m+[0m[0m cpu_threads_per_core                 = (known after apply)
      [32m+[0m[0m disable_api_stop                     = (known after apply)
      [32m+[0m[0m disable_api_termination              = (known after apply)
      [32m+[0m[0m ebs_optimized                        = (known after apply)
      [32m+[0m[0m get_password_data                    = false
      [32m+[0m[0m host_id                              = (known after apply)
      [32m+[0m[0m host_resource_group_arn              = (known after apply)
      [32m+[0m[0m iam_instance_profile                 = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_initiated_shutdown_behavior = (known after apply)
      [32m+[0m[0m instance_lifecycle                   = (known after apply)
      [32m+[0m[0m instance_state                       = (known after apply)
      [32m+[0m[0m instance_type                        = "t2.micro"
      [32m+[0m[0m ipv6_address_count                   = (known after apply)
      [32m+[0m[0m ipv6_addresses                       = (known after apply)
      [32m+[0m[0m key_name                             = "aws_rsa"
      [32m+[0m[0m monitoring                           = (known after apply)
      [32m+[0m[0m outpost_arn                          = (known after apply)
      [32m+[0m[0m password_data                        = (known after apply)
      [32m+[0m[0m placement_group                      = (known after apply)
      [32m+[0m[0m placement_partition_number           = (known after apply)
      [32m+[0m[0m primary_network_interface_id         = (known after apply)
      [32m+[0m[0m private_dns                          = (known after apply)
      [32m+[0m[0m private_ip                           = (known after apply)
      [32m+[0m[0m public_dns                           = (known after apply)
      [32m+[0m[0m public_ip                            = (known after apply)
      [32m+[0m[0m secondary_private_ips                = (known after apply)
      [32m+[0m[0m security_groups                      = (known after apply)
      [32m+[0m[0m source_dest_check                    = true
      [32m+[0m[0m spot_instance_request_id             = (known after apply)
      [32m+[0m[0m subnet_id                            = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
      [32m+[0m[0m tenancy                              = (known after apply)
      [32m+[0m[0m user_data                            = (known after apply)
      [32m+[0m[0m user_data_base64                     = (known after apply)
      [32m+[0m[0m user_data_replace_on_change          = false
      [32m+[0m[0m vpc_security_group_ids               = (known after apply)
    }

[1m  # aws_internet_gateway.app[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "app" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # aws_lb.nginx[0m will be created
[0m  [32m+[0m[0m resource "aws_lb" "nginx" {
      [32m+[0m[0m arn                                                          = (known after apply)
      [32m+[0m[0m arn_suffix                                                   = (known after apply)
      [32m+[0m[0m desync_mitigation_mode                                       = "defensive"
      [32m+[0m[0m dns_name                                                     = (known after apply)
      [32m+[0m[0m drop_invalid_header_fields                                   = false
      [32m+[0m[0m enable_deletion_protection                                   = false
      [32m+[0m[0m enable_http2                                                 = true
      [32m+[0m[0m enable_tls_version_and_cipher_suite_headers                  = false
      [32m+[0m[0m enable_waf_fail_open                                         = false
      [32m+[0m[0m enable_xff_client_port                                       = false
      [32m+[0m[0m enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      [32m+[0m[0m id                                                           = (known after apply)
      [32m+[0m[0m idle_timeout                                                 = 60
      [32m+[0m[0m internal                                                     = false
      [32m+[0m[0m ip_address_type                                              = (known after apply)
      [32m+[0m[0m load_balancer_type                                           = "application"
      [32m+[0m[0m name                                                         = "globo-web-alb"
      [32m+[0m[0m name_prefix                                                  = (known after apply)
      [32m+[0m[0m preserve_host_header                                         = false
      [32m+[0m[0m security_groups                                              = (known after apply)
      [32m+[0m[0m subnets                                                      = (known after apply)
      [32m+[0m[0m tags                                                         = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
      [32m+[0m[0m tags_all                                                     = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
      [32m+[0m[0m vpc_id                                                       = (known after apply)
      [32m+[0m[0m xff_header_processing_mode                                   = "append"
      [32m+[0m[0m zone_id                                                      = (known after apply)
    }

[1m  # aws_lb_listener.nginx[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_listener" "nginx" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m load_balancer_arn = (known after apply)
      [32m+[0m[0m port              = 80
      [32m+[0m[0m protocol          = "HTTP"
      [32m+[0m[0m ssl_policy        = (known after apply)
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }

      [32m+[0m[0m default_action {
          [32m+[0m[0m order            = (known after apply)
          [32m+[0m[0m target_group_arn = (known after apply)
          [32m+[0m[0m type             = "forward"
        }
    }

[1m  # aws_lb_target_group.nginx[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_target_group" "nginx" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m arn_suffix                         = (known after apply)
      [32m+[0m[0m connection_termination             = (known after apply)
      [32m+[0m[0m deregistration_delay               = "300"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m ip_address_type                    = (known after apply)
      [32m+[0m[0m lambda_multi_value_headers_enabled = false
      [32m+[0m[0m load_balancing_algorithm_type      = (known after apply)
      [32m+[0m[0m load_balancing_anomaly_mitigation  = (known after apply)
      [32m+[0m[0m load_balancing_cross_zone_enabled  = (known after apply)
      [32m+[0m[0m name                               = "nginx-alb-tg"
      [32m+[0m[0m name_prefix                        = (known after apply)
      [32m+[0m[0m port                               = 80
      [32m+[0m[0m preserve_client_ip                 = (known after apply)
      [32m+[0m[0m protocol                           = "HTTP"
      [32m+[0m[0m protocol_version                   = (known after apply)
      [32m+[0m[0m proxy_protocol_v2                  = false
      [32m+[0m[0m slow_start                         = 0
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
      [32m+[0m[0m target_type                        = "instance"
      [32m+[0m[0m vpc_id                             = (known after apply)
    }

[1m  # aws_lb_target_group_attachment.nginx1[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_target_group_attachment" "nginx1" {
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m port             = 80
      [32m+[0m[0m target_group_arn = (known after apply)
      [32m+[0m[0m target_id        = (known after apply)
    }

[1m  # aws_route_table.app[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "app" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = ""
              [32m+[0m[0m gateway_id                 = (known after apply)
              [32m+[0m[0m ipv6_cidr_block            = ""
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = ""
              [32m+[0m[0m network_interface_id       = ""
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
        ]
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # aws_route_table_association.app_public_subnet1[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "app_public_subnet1" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_route_table_association.app_public_subnet2[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "app_public_subnet2" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_security_group.alb_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "alb_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 5000
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 5000
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
        ]
      [32m+[0m[0m name                   = "nginx_alb_sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # aws_security_group.nginx_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "nginx_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 22
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 22
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 5000
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 5000
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 8080
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 8080
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
        ]
      [32m+[0m[0m name                   = "nginx_sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # aws_subnet.public_subnet1[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet1" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.0.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.public_subnet2[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet2" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_vpc.app[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "app" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "billing_code" = "00"
          [32m+[0m[0m "company"      = "Globomantics"
          [32m+[0m[0m "project"      = "Globomantics-Paglipay"
        }
    }

[1mPlan:[0m 14 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m aws_instance_public_dns = (known after apply)
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
Releasing state lock. This may take a few moments...
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Approval)
Stage "Approval" skipped due to when conditional
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Apply)
[Pipeline] sh
+ cd terraform/
+ terraform apply --auto-approve
